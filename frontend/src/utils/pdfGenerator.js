import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

// Helper function to safely format numbers
const formatCurrency = (amount) => {
  if (typeof amount !== 'number' || isNaN(amount)) {
    return '₹0.00';
  }
  return '₹' + amount.toLocaleString('en-IN', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
};

// Helper function to safely format dates
const formatDate = (dateString) => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  } catch (error) {
    return 'Invalid Date';
  }
};

// Simple PDF generation function that definitely works
export const generateQuickPDF = (reportData) => {
  try {
    console.log('Starting PDF generation...', reportData);
    
    // Create PDF document
    const doc = new jsPDF();
    
    // Set initial position
    let yPosition = 20;

    // Title
    doc.setFontSize(20);
    doc.setTextColor(128, 0, 0); // Maroon
    doc.text('Revia Financial Report', 105, yPosition, { align: 'center' });
    yPosition += 10;

    // Date
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text(`Generated: ${new Date().toLocaleDateString('en-IN')}`, 105, yPosition, { align: 'center' });
    yPosition += 15;

    // Financial Summary Section
    doc.setFontSize(16);
    doc.setTextColor(128, 0, 0);
    doc.text('Financial Summary', 20, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    
    const balance = reportData.totals?.balance || 0;
    const income = reportData.totals?.income || 0;
    const expenses = reportData.totals?.expenses || 0;

    doc.text(`Total Balance: ${formatCurrency(balance)}`, 25, yPosition);
    yPosition += 8;
    doc.text(`Total Income: ${formatCurrency(income)}`, 25, yPosition);
    yPosition += 8;
    doc.text(`Total Expenses: ${formatCurrency(expenses)}`, 25, yPosition);
    yPosition += 15;

    // Transactions Section (only if we have transactions)
    if (reportData.transactions && reportData.transactions.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(128, 0, 0);
      doc.text('Recent Transactions', 20, yPosition);
      yPosition += 10;

      // Limit to first 15 transactions to avoid huge PDFs
      const displayTransactions = reportData.transactions.slice(0, 15);
      
      const tableData = displayTransactions.map(transaction => [
        formatDate(transaction.date),
        transaction.description || 'No description',
        transaction.category || 'Uncategorized',
        formatCurrency(Math.abs(transaction.amount)),
        transaction.amount > 0 ? 'Income' : 'Expense'
      ]);

      // Create transactions table
      autoTable(doc, {
        startY: yPosition,
        head: [['Date', 'Description', 'Category', 'Amount', 'Type']],
        body: tableData,
        theme: 'grid',
        headStyles: {
          fillColor: [128, 0, 0],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 9,
          cellPadding: 3,
          overflow: 'linebreak'
        },
        margin: { left: 15, right: 15 },
        tableWidth: 'auto'
      });

      yPosition = doc.lastAutoTable.finalY + 10;
    } else {
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      doc.text('No transactions available', 20, yPosition);
      yPosition += 10;
    }

    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by Revia Finance Tracker', 105, pageHeight - 10, { align: 'center' });

    // Save the PDF
    const fileName = `revia-financial-report-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    console.log('PDF generated successfully:', fileName);
    return true;

  } catch (error) {
    console.error('PDF generation failed:', error);
    
    // Fallback: Show alert to user
    alert('Error generating PDF. Please check the console for details.');
    return false;
  }
};

// Main PDF generation function (uses the simple version for now)
export const generatePDF = (reportData, options = {}) => {
  console.log('Generating PDF with options:', options);
  return generateQuickPDF(reportData);
};

// Template configurations (for future use)
export const PDF_TEMPLATES = {
  STANDARD: {
    id: 'STANDARD',
    name: 'Standard Report',
    description: 'Comprehensive financial overview',
    includes: ['summary', 'transactions'],
    layout: 'portrait'
  },
  MINIMAL: {
    id: 'MINIMAL',
    name: 'Minimal Summary',
    description: 'Clean, concise financial summary',
    includes: ['summary'],
    layout: 'portrait'
  }
};